"""
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
"""


class MySolution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        out = []
        for i in range(num + 1):
            out.append(bin(i).count("1"))
        return out


"""
Suppose we have an integer:

x = (1001011101)_2 = (605)_{10}
and we already calculated and stored all the results of 0 to x - 1.
Then we know that xx is differ by one bit with a number we already calculated:
x' = (1011101)_2 = (93)_{10}
They are different only in the most significant bit.
Let's exam the range [0, 3] in the binary form:
(0) = (0)_2​	
(1) = (1)_2
(2) = (10)_2 
(3) = (11)_2 
One can see that the binary form of 2 and 3 can be generated by adding 1 bit in front of 0 and 1.
Thus, they are different only by 1 regarding pop count.
Similarly, we can generate the results for [4, 7] using [0, 3] as blueprints.
In general, we have the following transition function for popcount P(x):
P(x + b) = P(x) + 1, b = 2^m > x
With this transition function, we can then apply Dynamic Programming to generate all the pop counts starting from 0.
"""


class SolutionDP1(object):  # leftmost bit as significant bit
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        ans = [0] * (num + 1)
        i = 0
        b = 1
        while b <= num:
            while i < b and i + b <= num:
                ans[i + b] = ans[i] + 1
                i += 1
            i = 0
            b <<= 1
        return ans

"""
Following the same principle of the previous approach,
we can also have a transition function by playing with the least significant bit.
Let look at the relation between xx and x' = x / 2
x = (1001011101)_2 = (605)_{10}
x' = (100101110)_2 = (302)_{10}
We can see that x'is differ than x by one bit, because x'
can be considered as the result of removing the least significant bit of x.
Thus, we have the following transition function of pop count P(x):
P(x) = P(x / 2) + (x mod 2)
"""


class SolutionDP2(object):  # rightmost bit as significant bit
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        ans = [0] * (num + 1)
        for i in range(1, num + 1):
            ans[i] = ans[i >> 1] + (i & 1)
        return ans
